{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Signed URL Documentation","text":"<p>This library makes it easy to sign URLs in CodeIgniter 4 framework. It can be used to prevent manual URL manipulation or to auto expiry links that have been given to the end user.</p>"},{"location":"#overview","title":"Overview","text":"<p>We can sign URLs very easy with two main methods that act similar to the helper functions known from CodeIgniter's URL helper.</p> <pre><code>echo signedurl()-&gt;siteUrl('controller/method?query=string');\n// https://example.com/controller/method?query=string&amp;signature=signature-goes-here</code></pre> <pre><code>echo signedurl()-&gt;setExpiration(DAY * 2)-&gt;urlTo('namedRoute', 12);\n// https://example.com/route/name/12?expiration=1671980371&amp;signature=signature-goes-here</code></pre>"},{"location":"#versions","title":"Versions","text":"<p>Versions are not compatible - URLs generated in one version of Signed URL will not work with another version.</p> CodeIgniter version Signed URL version <code>&gt;= 4.4</code> <code>2.*</code> <code>&lt; 4.4</code> <code>1.*</code>"},{"location":"commands/","title":"Commands","text":"<p>Available options:</p> <ul> <li>publish</li> <li>algorithms</li> </ul>"},{"location":"commands/#publish","title":"publish","text":"<p>This command will publish configuration file to the APP namespace.</p> <pre><code>php spark signedurl:publish</code></pre>"},{"location":"commands/#algorithms","title":"algorithms","text":"<p>This command will list all avaliable algorithms options to use with <code>$algorithm</code> config variable.</p> <pre><code>php spark signedurl:algorithms</code></pre> <p>Warning</p> <p>If you're not sure what you're doing please stay with the default option.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>To make changes to the config file, we have to have our copy in the <code>app/Config/SignedUrl.php</code>. Luckily, this package comes with handy command that will make this easy.</p> <p>When we run:</p> <pre><code>php spark signedurl:publish</code></pre> <p>We will get our copy ready for modifications.</p> <p>Available options:</p> <ul> <li>$expiration</li> <li>$token</li> <li>$algorithm</li> <li>$expirationKey</li> <li>$tokenKey</li> <li>$signatureKey</li> <li>$algorithmKey</li> <li>$includeAlgorithmKey</li> <li>$redirect</li> <li>$show404</li> </ul>"},{"location":"configuration/#expiration","title":"$expiration","text":"<p>This setting allows us to set a fixed time after which the signed URL will expire. It's number of seconds in unix timestamp that will be added to the current date.</p> <p>By default, this is set to <code>null</code>.</p>"},{"location":"configuration/#token","title":"$token","text":"<p>This setting allows us to set a randomly generated token with given length. It is useful when you have very few changing parameters in the URL.</p> <p>By default, this is set to <code>null</code>.</p>"},{"location":"configuration/#algorithm","title":"$algorithm","text":"<p>This setting allows us to set algorithm that will be used during signing the URLs.</p> <p>By default, this is set to <code>sha256</code>.</p> <p>Note</p> <p>If you're not sure what you're doing please stay with the default option.</p> <p>You can see the list of all available options when running command:</p> <pre><code>php spark signedurl:algorithms</code></pre> <p>Warning</p> <p>When you don't include used algorithm to the query string (default), then changing algorithm will result with invalidating all the generated URLs.</p>"},{"location":"configuration/#expirationkey","title":"$expirationKey","text":"<p>This is the name of the query string key, which will be responsible for storing the time after which the URL will expire.</p> <p>By default, this is set to <code>expires</code>.</p> <p>Note</p> <p>Whatever name you will choose, treat it as a restricted name and don't use it as a part of the query string in your code.</p>"},{"location":"configuration/#tokenkey","title":"$tokenKey","text":"<p>This is the name of the query string key, which will be responsible for storing the token string.</p> <p>By default, this is set to <code>token</code>.</p> <p>Note</p> <p>Whatever name you will choose, treat it as a restricted name and don't use it as a part of the query string in your code.</p>"},{"location":"configuration/#signaturekey","title":"$signatureKey","text":"<p>This is the name of the query string key, which will be responsible for storing the signature by which the validity of the entire URL will be checked.</p> <p>By default, this is set to <code>signature</code>.</p> <p>Note</p> <p>Whatever name you will choose, treat it as a restricted name and don't use it as a part of the query string in your code.</p>"},{"location":"configuration/#algorithmkey","title":"$algorithmKey","text":"<p>This is the name of the query string key, which will be responsible for storing the algorithm by which the validity of the entire URL will be checked.</p> <p>By default, this is set to <code>algorithm</code>.</p> <p>Note</p> <p>Whatever name you will choose, treat it as a restricted name and don't use it as a part of the query string in your code.</p>"},{"location":"configuration/#includealgorithmkey","title":"$includeAlgorithmKey","text":"<p>This setting determines if the algorithm will be included to the query string of the generated URL.</p> <p>By default, this is set to <code>false</code>.</p>"},{"location":"configuration/#redirectto","title":"$redirectTo","text":"<p>This setting is used in the Filter to determine whether we will redirect user to the given URI path with the <code>error</code>, when URL will not be valid or expired.</p> <p>By default, this is set to <code>null</code>.</p>"},{"location":"configuration/#redirect","title":"$redirect","text":"<p>This setting is used in the Filter to determine whether we will redirect user to the previous page with the <code>error</code>, when URL will not be valid or expired.</p> <p>By default, this is set to <code>false</code>.</p>"},{"location":"configuration/#show404","title":"$show404","text":"<p>This setting is used in the Filter to determine whether we will show a 404 page, when URL will not be valid or expired.</p> <p>By default, this is set to <code>false</code>.</p>"},{"location":"filters/","title":"Filters","text":""},{"location":"filters/#overview","title":"Overview","text":"<p>To validate signed URLs we can use build in filter. We can enable it in one simple step.</p> <p>Define when filter should be fired up. In the example below we will assume it will be used when the first segment of the url will contain <code>signed-urls</code> string.</p> <pre><code>// app/Config/Filters.php\n&lt;?php\n\n// ...\n\nclass Filters extends BaseConfig\n{\n\n    // ...\n\n    public $filters = [\n        'signedurl' =&gt; ['before' =&gt; ['signed-urls/*']],\n    ];\n}</code></pre>"},{"location":"filters/#options","title":"Options","text":"<p>By default, this filter will throw <code>SignedUrlException</code> when the URL won't be signed or will be expired. But there are other options, and we can enable them by editing the config file:</p> <ul> <li>We can redirect to the previous page</li> <li>Or show 404 page</li> </ul> <p>More info you can find in the Configuration page.</p> <p>Note</p> <p>Remember, that if the filter implementation doesn't suit you, you can always create your own, which will behave differently upon an error. You can also not use the filter at all and make the check in the controller.</p>"},{"location":"helpers/","title":"Helpers","text":"<p>Available options:</p> <ul> <li>signedurl()</li> </ul>"},{"location":"helpers/#signedurl","title":"signedurl()","text":"<p>This function returns the <code>SignedUrl</code> class instance.</p> <pre><code>signedurl()-&gt;setExpiration(DAY)-&gt;siteUrl('controller/method');</code></pre>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Composer Installation</li> <li>Manual Installation</li> <li>Generate encryption key</li> </ul>"},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require michalsn/codeigniter-signed-url</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume, that files from this project will be located in <code>app/ThirdParty/signed-url</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>Michalsn\\CodeIgniterSignedUrl</code> namespace to the <code>$psr4</code> array. You also have to add <code>Common.php</code> to the <code>$files</code> array, like in the below example:</p> <pre><code>&lt;?php\n\n...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Config'      =&gt; APPPATH . 'Config',\n    'Michalsn\\CodeIgniterSignedUrl' =&gt; APPPATH . 'ThirdParty/signed-url/src',\n];\n\n...\n\npublic $files = [\n    APPPATH . 'ThirdParty/signed-url/src/Common.php',\n];</code></pre>"},{"location":"installation/#generate-encryption-key","title":"Generate encryption key","text":"<p>Make sure that you have generated the encryption key. If not, please run command:</p> <pre><code>php spark key:generate</code></pre> <p>Warning</p> <p>Please remember that any change made to the <code>encryption key</code> after generating signed URLs will auto expire them.</p>"},{"location":"methods/","title":"Methods","text":"<p>Available options:</p> <ul> <li>setExpiration()</li> <li>siteUrl()</li> <li>urlTo()</li> <li>sign()</li> <li>verify()</li> </ul>"},{"location":"methods/#setexpiration","title":"setExpiration()","text":"<p>With this method we can set temporary value for expiration. The value set here will be reset when the: <code>siteUrl()</code>, <code>urlTo()</code> or <code>sign()</code> methods are called.</p> <p>This is number of seconds in unix timestamp that will be added to the current date.</p> <pre><code>service('signedurl')-&gt;setExpiration(DAY)-&gt;siteUrl('url');</code></pre> <p>Note</p> <p>If you want the URLs to always be valid for a certain period of time, you can set time in the <code>$expiration</code> variable in the configuration file.</p>"},{"location":"methods/#siteurl","title":"siteUrl()","text":"<p>This method is similar to the standard <code>site_url</code>, but it produces signed URL.</p> <pre><code>service('signedurl')-&gt;siteUrl('controller/method');</code></pre>"},{"location":"methods/#urlto","title":"urlTo()","text":"<p>This method is similar to the standard <code>url_to</code>, but it produces signed URL.</p> <pre><code>service('signedurl')-&gt;urlTo('namedRoute', 'param');</code></pre>"},{"location":"methods/#sign","title":"sign()","text":"<p>With this method we can sign URI. Usually you won't be using this method directly, since it is used by other methods.</p> <pre><code>service('signedurl')-&gt;sign($uri);</code></pre>"},{"location":"methods/#verify","title":"verify()","text":"<p>With this method we can verify if given URL is properly signed and not expired if expiration timestamp was set during URL creation.</p> <pre><code>service('signedurl')-&gt;verify($request);</code></pre> <p>The URL verification may take place automatically via Filter class, but you can also make it happen in your Controller instead. The choice is up to you.</p>"}]}